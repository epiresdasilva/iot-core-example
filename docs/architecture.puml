@startuml IoT Core Example Architecture

!define AWSPuml https://raw.githubusercontent.com/awslabs/aws-icons-for-plantuml/v16.0/dist
!include AWSPuml/AWSCommon.puml
!include AWSPuml/InternetOfThings/IoTCore.puml
!include AWSPuml/Database/DynamoDB.puml
!include AWSPuml/Compute/Lambda.puml
!include AWSPuml/ApplicationIntegration/APIGateway.puml
!include AWSPuml/General/Client.puml
!include AWSPuml/General/MobileClient.puml

skinparam linetype ortho
skinparam componentStyle rectangle

rectangle "AWS Cloud" {
  IoTCore(iotCore, "AWS IoT Core", "Recebe mensagens MQTT")
  DynamoDB(dynamoDB, "Amazon DynamoDB", "Persiste mensagens com TTL")
  
  rectangle "Lambda Functions" {
    Lambda(getMessages, "getMessages", "Consulta mensagens pendentes")
    Lambda(ackMessages, "ackMessages", "Confirma processamento")
  }
  
  APIGateway(apiGateway, "API Gateway", "Expõe APIs REST")
}

rectangle "Dispositivos" {
  MobileClient(device1, "Dispositivo IoT 1", "")
  MobileClient(device2, "Dispositivo IoT 2", "")
}

rectangle "Aplicações Externas" {
  Client(app, "Aplicação Cliente", "")
}

' Fluxo de dados
device1 -right-> iotCore : MQTT (devices/data)
device2 -right-> iotCore : MQTT (devices/data)
iotCore -right-> dynamoDB : "Regra IoT\n(adiciona timestamp, id, status)"

apiGateway -down-> getMessages
apiGateway -down-> ackMessages
getMessages -right-> dynamoDB : "Consulta\n(status=pending)"
ackMessages -right-> dynamoDB : "Atualiza\n(status=processed)"
app -up-> apiGateway : "HTTP\n(GET /messages, POST /messages/ack)"

note bottom of dynamoDB
  TTL configurado:
  - 24h para mensagens processadas
  - 30 dias para mensagens pendentes
end note

@enduml
